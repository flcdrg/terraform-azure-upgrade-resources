trigger:
  - main

pool:
  vmImage: ubuntu-latest

variables:
  - group: Terraform-Token

jobs:
  - job: dotnet
    displayName: "Build .NET"
    pool:
      vmImage: ubuntu-latest
    steps:
      - task: UseDotNet@2
        displayName: "Install .NET Core SDK"
        inputs:
          packageType: sdk
          version: 8.x
          # installationPath: $(Agent.ToolsDirectory)/dotnet
      - task: DotNetCoreCLI@2
        displayName: "Publish"
        inputs:
          command: publish
          publishWebProjects: false
          projects: "**/*.csproj"
          arguments: "--configuration Release --output $(Build.ArtifactStagingDirectory)"
          zipAfterPublish: true
          modifyOutputPath: false
          workingDirectory: $(System.DefaultWorkingDirectory)/src

      - task: PublishPipelineArtifact@1
        displayName: "Publish Artifact"
        condition: eq(variables['Build.SourceBranch'], 'refs/heads/main')
        inputs:
          targetPath: $(Build.ArtifactStagingDirectory)
          artifact: drop
          publishLocation: pipeline

  - job: terraformv2
    displayName: "Terraform AzureRM 2.x"
    pool:
      vmImage: ubuntu-latest
    variables:
      TerraformSourceDirectory: $(System.DefaultWorkingDirectory)/v2
    steps:
      - script: echo "##vso[task.setvariable variable=TF_TOKEN_app_terraform_io]$(TF_TOKEN)"
        displayName: "Terraform Token"

      - script: ls -al
        displayName: "Script: List files"
        workingDirectory: $(TerraformSourceDirectory)

      - task: TerraformInstaller@2
        displayName: "Terraform: Installer"
        inputs:
          terraformVersion: "latest"

      - task: TerraformCLI@2
        displayName: "Terraform: init"
        inputs:
          command: init
          workingDirectory: "$(TerraformSourceDirectory)"
          backendType: selfConfigured
          commandOptions: -no-color -input=false
          allowTelemetryCollection: false

      - ${{ if ne(variables['Build.SourceBranch'], 'refs/heads/main') }}:
          - task: TerraformCLI@2
            displayName: "Terraform: plan"
            inputs:
              command: plan
              workingDirectory: "$(TerraformSourceDirectory)"
              commandOptions: -no-color -input=false
              allowTelemetryCollection: false

      - ${{ if eq(variables['Build.SourceBranch'], 'refs/heads/main') }}:
          - task: TerraformCLI@2
            displayName: "Terraform: apply"
            inputs:
              command: apply
              workingDirectory: "$(TerraformSourceDirectory)"
              commandOptions: -no-color -input=false -auto-approve
              allowTelemetryCollection: false

      - task: TerraformCLI@2
        displayName: "Terraform: output"
        inputs:
          command: output
          workingDirectory: "$(TerraformSourceDirectory)"
          commandOptions: -no-color
          allowTelemetryCollection: false

      - script: |
          echo "##vso[task.setvariable variable=TF_OUT_APPSERVICE_NAME;isOutput=true]$(TF_OUT_APPSERVICE_NAME)"
        displayName: "Script: Set output variables"
        name: setOutputVar

  - job: deploy
    displayName: Deploy to Azure Web App
    dependsOn:
      - terraformv2
      - dotnet

    pool:
      vmImage: ubuntu-latest

    variables:
      - name: appName
        value: $[ dependencies.terraform.outputs['setOutputVar.TF_OUT_APPSERVICE_NAME'] ]

    steps:
      - task: DownloadPipelineArtifact@2
        displayName: "Download Artifact"
        inputs:
          artifactName: drop
          path: $(System.DefaultWorkingDirectory)/drop

      - task: AzureWebApp@1
        displayName: "Deploy Azure Web App from zip"
        condition: eq(variables['Build.SourceBranch'], 'refs/heads/main')
        inputs:
          azureSubscription: Azure MSDN - rg-tfupgrade-australiasoutheast
          appName: $(appName)
          package: $(System.DefaultWorkingDirectory)/drop/a.zip
          deploymentMethod: zipDeploy
          appType: webAppLinux
